function y = fftlfsn(H,alpha,m,M,C,N,n)
%
% This function generates LFSN (Linear Fractional Stable Noise) Y_k
%
% Y_k = K(H,alpha,C) \int_R (s)_+^d - (s-1)_+^d M(ds), d = H-1/\alpha
%
% by using a Riemann sum approximation of its stochastic integral
% representation. The constant K(H,alpha,C) is chosen so that
% ||Y(k)||_alpha = C, where C is an input parameter.
%
% input:
% H <- the self-similarity parameter.
% alpha <- the tail-exponent of the stable distribution
% m <- 1/m = the mesh-size
% M <- the kernel cut-off parameter
% C <- the scale parameter
% N <- size of the sample
% n <- number of independent paths to be simulated
%
% output:
% y <- (nxN) matrix the rows give independent paths.
%
%****************************************************************
%* NOTES: 1. When the parameters m and (M+N) are integer powers of 2,
%* the fast Fourier transform algorithm is used.
%* 2. Symmetric alpha-stable variates are generated by using
%* rstab.m (with d2.m and tan2.m), which is a MATLAB version
%* of the classical RSTAB.FOR Chambers, Mallows and Stuck, JASA
%* This code can be obtained from Dimitar L. Vandev,
%* vandev@fmi.uni-sofia.bg or sstoev@math.bu.edu.
%****************************************************************
% Written by Stilian Stoev 05.06.2002, sstoev@math.bu.edu
%
% Usage:
% y = fftlfsn(H,alpha,m,M,C,N,n)
%
mh = 1/m;
d = H-1/alpha;
t0 = [mh:mh:1];
t1 = [1+mh:mh:M];
A = mh^(1/alpha)*[t0.^d, t1.^d-(t1-1).^d];
C = C*(sum(abs(A).^alpha)^(-1/alpha));
A = C*A;
Na = m*(M+N);
A = fft(A,Na);
y = [];
for i=1:n
  if alpha<2
    Z = stabrnd(alpha,0,1,0,Na);
  elseif alpha==2
    Z = randn(1,Na);
  end
  Z = fft(Z,Na);
  w = real(ifft(Z.*A,Na));
  y = [y; w(1:m:N*m)];
end